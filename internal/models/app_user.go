// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AppUser is an object representing the database table.
type AppUser struct {
	ID       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	Password string      `boil:"password" json:"password" toml:"password" yaml:"password"`
	Email    string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Bio      null.String `boil:"bio" json:"bio,omitempty" toml:"bio" yaml:"bio,omitempty"`
	Image    null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`

	R *appUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppUserColumns = struct {
	ID       string
	Username string
	Password string
	Email    string
	Bio      string
	Image    string
}{
	ID:       "id",
	Username: "username",
	Password: "password",
	Email:    "email",
	Bio:      "bio",
	Image:    "image",
}

var AppUserTableColumns = struct {
	ID       string
	Username string
	Password string
	Email    string
	Bio      string
	Image    string
}{
	ID:       "app_user.id",
	Username: "app_user.username",
	Password: "app_user.password",
	Email:    "app_user.email",
	Bio:      "app_user.bio",
	Image:    "app_user.image",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AppUserWhere = struct {
	ID       whereHelperint64
	Username whereHelperstring
	Password whereHelperstring
	Email    whereHelperstring
	Bio      whereHelpernull_String
	Image    whereHelpernull_String
}{
	ID:       whereHelperint64{field: "\"app_user\".\"id\""},
	Username: whereHelperstring{field: "\"app_user\".\"username\""},
	Password: whereHelperstring{field: "\"app_user\".\"password\""},
	Email:    whereHelperstring{field: "\"app_user\".\"email\""},
	Bio:      whereHelpernull_String{field: "\"app_user\".\"bio\""},
	Image:    whereHelpernull_String{field: "\"app_user\".\"image\""},
}

// AppUserRels is where relationship names are stored.
var AppUserRels = struct {
	UserArticles         string
	UserArticleFavorites string
	UserComments         string
	FollowFollows        string
	UserFollows          string
}{
	UserArticles:         "UserArticles",
	UserArticleFavorites: "UserArticleFavorites",
	UserComments:         "UserComments",
	FollowFollows:        "FollowFollows",
	UserFollows:          "UserFollows",
}

// appUserR is where relationships are stored.
type appUserR struct {
	UserArticles         ArticleSlice         `boil:"UserArticles" json:"UserArticles" toml:"UserArticles" yaml:"UserArticles"`
	UserArticleFavorites ArticleFavoriteSlice `boil:"UserArticleFavorites" json:"UserArticleFavorites" toml:"UserArticleFavorites" yaml:"UserArticleFavorites"`
	UserComments         CommentSlice         `boil:"UserComments" json:"UserComments" toml:"UserComments" yaml:"UserComments"`
	FollowFollows        FollowSlice          `boil:"FollowFollows" json:"FollowFollows" toml:"FollowFollows" yaml:"FollowFollows"`
	UserFollows          FollowSlice          `boil:"UserFollows" json:"UserFollows" toml:"UserFollows" yaml:"UserFollows"`
}

// NewStruct creates a new relationship struct
func (*appUserR) NewStruct() *appUserR {
	return &appUserR{}
}

func (r *appUserR) GetUserArticles() ArticleSlice {
	if r == nil {
		return nil
	}
	return r.UserArticles
}

func (r *appUserR) GetUserArticleFavorites() ArticleFavoriteSlice {
	if r == nil {
		return nil
	}
	return r.UserArticleFavorites
}

func (r *appUserR) GetUserComments() CommentSlice {
	if r == nil {
		return nil
	}
	return r.UserComments
}

func (r *appUserR) GetFollowFollows() FollowSlice {
	if r == nil {
		return nil
	}
	return r.FollowFollows
}

func (r *appUserR) GetUserFollows() FollowSlice {
	if r == nil {
		return nil
	}
	return r.UserFollows
}

// appUserL is where Load methods for each relationship are stored.
type appUserL struct{}

var (
	appUserAllColumns            = []string{"id", "username", "password", "email", "bio", "image"}
	appUserColumnsWithoutDefault = []string{"username", "password", "email"}
	appUserColumnsWithDefault    = []string{"id", "bio", "image"}
	appUserPrimaryKeyColumns     = []string{"id"}
	appUserGeneratedColumns      = []string{}
)

type (
	// AppUserSlice is an alias for a slice of pointers to AppUser.
	// This should almost always be used instead of []AppUser.
	AppUserSlice []*AppUser

	appUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appUserType                 = reflect.TypeOf(&AppUser{})
	appUserMapping              = queries.MakeStructMapping(appUserType)
	appUserPrimaryKeyMapping, _ = queries.BindMapping(appUserType, appUserMapping, appUserPrimaryKeyColumns)
	appUserInsertCacheMut       sync.RWMutex
	appUserInsertCache          = make(map[string]insertCache)
	appUserUpdateCacheMut       sync.RWMutex
	appUserUpdateCache          = make(map[string]updateCache)
	appUserUpsertCacheMut       sync.RWMutex
	appUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single appUser record from the query.
func (q appUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppUser, error) {
	o := &AppUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for app_user")
	}

	return o, nil
}

// All returns all AppUser records from the query.
func (q appUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppUserSlice, error) {
	var o []*AppUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AppUser slice")
	}

	return o, nil
}

// Count returns the count of all AppUser records in the query.
func (q appUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count app_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q appUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if app_user exists")
	}

	return count > 0, nil
}

// UserArticles retrieves all the article's Articles with an executor via user_id column.
func (o *AppUser) UserArticles(mods ...qm.QueryMod) articleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"article\".\"user_id\"=?", o.ID),
	)

	return Articles(queryMods...)
}

// UserArticleFavorites retrieves all the article_favorite's ArticleFavorites with an executor via user_id column.
func (o *AppUser) UserArticleFavorites(mods ...qm.QueryMod) articleFavoriteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"article_favorite\".\"user_id\"=?", o.ID),
	)

	return ArticleFavorites(queryMods...)
}

// UserComments retrieves all the comment's Comments with an executor via user_id column.
func (o *AppUser) UserComments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"comment\".\"user_id\"=?", o.ID),
	)

	return Comments(queryMods...)
}

// FollowFollows retrieves all the follow's Follows with an executor via follow_id column.
func (o *AppUser) FollowFollows(mods ...qm.QueryMod) followQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"follow\".\"follow_id\"=?", o.ID),
	)

	return Follows(queryMods...)
}

// UserFollows retrieves all the follow's Follows with an executor via user_id column.
func (o *AppUser) UserFollows(mods ...qm.QueryMod) followQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"follow\".\"user_id\"=?", o.ID),
	)

	return Follows(queryMods...)
}

// LoadUserArticles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appUserL) LoadUserArticles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppUser interface{}, mods queries.Applicator) error {
	var slice []*AppUser
	var object *AppUser

	if singular {
		var ok bool
		object, ok = maybeAppUser.(*AppUser)
		if !ok {
			object = new(AppUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppUser))
			}
		}
	} else {
		s, ok := maybeAppUser.(*[]*AppUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`article`),
		qm.WhereIn(`article.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load article")
	}

	var resultSlice []*Article
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice article")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on article")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for article")
	}

	if singular {
		object.R.UserArticles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &articleR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserArticles = append(local.R.UserArticles, foreign)
				if foreign.R == nil {
					foreign.R = &articleR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserArticleFavorites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appUserL) LoadUserArticleFavorites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppUser interface{}, mods queries.Applicator) error {
	var slice []*AppUser
	var object *AppUser

	if singular {
		var ok bool
		object, ok = maybeAppUser.(*AppUser)
		if !ok {
			object = new(AppUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppUser))
			}
		}
	} else {
		s, ok := maybeAppUser.(*[]*AppUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`article_favorite`),
		qm.WhereIn(`article_favorite.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load article_favorite")
	}

	var resultSlice []*ArticleFavorite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice article_favorite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on article_favorite")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for article_favorite")
	}

	if singular {
		object.R.UserArticleFavorites = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &articleFavoriteR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserArticleFavorites = append(local.R.UserArticleFavorites, foreign)
				if foreign.R == nil {
					foreign.R = &articleFavoriteR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appUserL) LoadUserComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppUser interface{}, mods queries.Applicator) error {
	var slice []*AppUser
	var object *AppUser

	if singular {
		var ok bool
		object, ok = maybeAppUser.(*AppUser)
		if !ok {
			object = new(AppUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppUser))
			}
		}
	} else {
		s, ok := maybeAppUser.(*[]*AppUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`comment`),
		qm.WhereIn(`comment.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comment")
	}

	if singular {
		object.R.UserComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserComments = append(local.R.UserComments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadFollowFollows allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appUserL) LoadFollowFollows(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppUser interface{}, mods queries.Applicator) error {
	var slice []*AppUser
	var object *AppUser

	if singular {
		var ok bool
		object, ok = maybeAppUser.(*AppUser)
		if !ok {
			object = new(AppUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppUser))
			}
		}
	} else {
		s, ok := maybeAppUser.(*[]*AppUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`follow`),
		qm.WhereIn(`follow.follow_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load follow")
	}

	var resultSlice []*Follow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice follow")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on follow")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for follow")
	}

	if singular {
		object.R.FollowFollows = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followR{}
			}
			foreign.R.Follow = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FollowID {
				local.R.FollowFollows = append(local.R.FollowFollows, foreign)
				if foreign.R == nil {
					foreign.R = &followR{}
				}
				foreign.R.Follow = local
				break
			}
		}
	}

	return nil
}

// LoadUserFollows allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appUserL) LoadUserFollows(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppUser interface{}, mods queries.Applicator) error {
	var slice []*AppUser
	var object *AppUser

	if singular {
		var ok bool
		object, ok = maybeAppUser.(*AppUser)
		if !ok {
			object = new(AppUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppUser))
			}
		}
	} else {
		s, ok := maybeAppUser.(*[]*AppUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &appUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`follow`),
		qm.WhereIn(`follow.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load follow")
	}

	var resultSlice []*Follow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice follow")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on follow")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for follow")
	}

	if singular {
		object.R.UserFollows = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserFollows = append(local.R.UserFollows, foreign)
				if foreign.R == nil {
					foreign.R = &followR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// AddUserArticles adds the given related objects to the existing relationships
// of the app_user, optionally inserting them as new records.
// Appends related to o.R.UserArticles.
// Sets related.R.User appropriately.
func (o *AppUser) AddUserArticles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Article) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"article\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, articlePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appUserR{
			UserArticles: related,
		}
	} else {
		o.R.UserArticles = append(o.R.UserArticles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &articleR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserArticleFavorites adds the given related objects to the existing relationships
// of the app_user, optionally inserting them as new records.
// Appends related to o.R.UserArticleFavorites.
// Sets related.R.User appropriately.
func (o *AppUser) AddUserArticleFavorites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ArticleFavorite) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"article_favorite\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, articleFavoritePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appUserR{
			UserArticleFavorites: related,
		}
	} else {
		o.R.UserArticleFavorites = append(o.R.UserArticleFavorites, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &articleFavoriteR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserComments adds the given related objects to the existing relationships
// of the app_user, optionally inserting them as new records.
// Appends related to o.R.UserComments.
// Sets related.R.User appropriately.
func (o *AppUser) AddUserComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appUserR{
			UserComments: related,
		}
	} else {
		o.R.UserComments = append(o.R.UserComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddFollowFollows adds the given related objects to the existing relationships
// of the app_user, optionally inserting them as new records.
// Appends related to o.R.FollowFollows.
// Sets related.R.Follow appropriately.
func (o *AppUser) AddFollowFollows(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Follow) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FollowID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"follow\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"follow_id"}),
				strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FollowID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appUserR{
			FollowFollows: related,
		}
	} else {
		o.R.FollowFollows = append(o.R.FollowFollows, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followR{
				Follow: o,
			}
		} else {
			rel.R.Follow = o
		}
	}
	return nil
}

// AddUserFollows adds the given related objects to the existing relationships
// of the app_user, optionally inserting them as new records.
// Appends related to o.R.UserFollows.
// Sets related.R.User appropriately.
func (o *AppUser) AddUserFollows(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Follow) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"follow\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &appUserR{
			UserFollows: related,
		}
	} else {
		o.R.UserFollows = append(o.R.UserFollows, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AppUsers retrieves all the records using an executor.
func AppUsers(mods ...qm.QueryMod) appUserQuery {
	mods = append(mods, qm.From("\"app_user\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"app_user\".*"})
	}

	return appUserQuery{q}
}

// FindAppUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAppUser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*AppUser, error) {
	appUserObj := &AppUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"app_user\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, appUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from app_user")
	}

	return appUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AppUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no app_user provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(appUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	appUserInsertCacheMut.RLock()
	cache, cached := appUserInsertCache[key]
	appUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			appUserAllColumns,
			appUserColumnsWithDefault,
			appUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(appUserType, appUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appUserType, appUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"app_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"app_user\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into app_user")
	}

	if !cached {
		appUserInsertCacheMut.Lock()
		appUserInsertCache[key] = cache
		appUserInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AppUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AppUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	appUserUpdateCacheMut.RLock()
	cache, cached := appUserUpdateCache[key]
	appUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			appUserAllColumns,
			appUserPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return errors.New("models: unable to update app_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"app_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, appUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appUserType, appUserMapping, append(wl, appUserPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update app_user row")
	}

	if !cached {
		appUserUpdateCacheMut.Lock()
		appUserUpdateCache[key] = cache
		appUserUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q appUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for app_user")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AppUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"app_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, appUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in appUser slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AppUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no app_user provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(appUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appUserUpsertCacheMut.RLock()
	cache, cached := appUserUpsertCache[key]
	appUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			appUserAllColumns,
			appUserColumnsWithDefault,
			appUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			appUserAllColumns,
			appUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert app_user, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(appUserPrimaryKeyColumns))
			copy(conflict, appUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"app_user\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(appUserType, appUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appUserType, appUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert app_user")
	}

	if !cached {
		appUserUpsertCacheMut.Lock()
		appUserUpsertCache[key] = cache
		appUserUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AppUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AppUser) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no AppUser provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appUserPrimaryKeyMapping)
	sql := "DELETE FROM \"app_user\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from app_user")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q appUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no appUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from app_user")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AppUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"app_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from appUser slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AppUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAppUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AppUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"app_user\".* FROM \"app_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AppUserSlice")
	}

	*o = slice

	return nil
}

// AppUserExists checks if the AppUser row exists.
func AppUserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"app_user\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if app_user exists")
	}

	return exists, nil
}
