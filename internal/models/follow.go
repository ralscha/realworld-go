// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Follow is an object representing the database table.
type Follow struct {
	ID       int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID   int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	FollowID int64 `boil:"follow_id" json:"follow_id" toml:"follow_id" yaml:"follow_id"`

	R *followR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L followL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FollowColumns = struct {
	ID       string
	UserID   string
	FollowID string
}{
	ID:       "id",
	UserID:   "user_id",
	FollowID: "follow_id",
}

var FollowTableColumns = struct {
	ID       string
	UserID   string
	FollowID string
}{
	ID:       "follow.id",
	UserID:   "follow.user_id",
	FollowID: "follow.follow_id",
}

// Generated where

var FollowWhere = struct {
	ID       whereHelperint64
	UserID   whereHelperint64
	FollowID whereHelperint64
}{
	ID:       whereHelperint64{field: "\"follow\".\"id\""},
	UserID:   whereHelperint64{field: "\"follow\".\"user_id\""},
	FollowID: whereHelperint64{field: "\"follow\".\"follow_id\""},
}

// FollowRels is where relationship names are stored.
var FollowRels = struct {
	Follow string
	User   string
}{
	Follow: "Follow",
	User:   "User",
}

// followR is where relationships are stored.
type followR struct {
	Follow *User `boil:"Follow" json:"Follow" toml:"Follow" yaml:"Follow"`
	User   *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*followR) NewStruct() *followR {
	return &followR{}
}

func (r *followR) GetFollow() *User {
	if r == nil {
		return nil
	}
	return r.Follow
}

func (r *followR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// followL is where Load methods for each relationship are stored.
type followL struct{}

var (
	followAllColumns            = []string{"id", "user_id", "follow_id"}
	followColumnsWithoutDefault = []string{"user_id", "follow_id"}
	followColumnsWithDefault    = []string{"id"}
	followPrimaryKeyColumns     = []string{"id"}
	followGeneratedColumns      = []string{"id"}
)

type (
	// FollowSlice is an alias for a slice of pointers to Follow.
	// This should almost always be used instead of []Follow.
	FollowSlice []*Follow

	followQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	followType                 = reflect.TypeOf(&Follow{})
	followMapping              = queries.MakeStructMapping(followType)
	followPrimaryKeyMapping, _ = queries.BindMapping(followType, followMapping, followPrimaryKeyColumns)
	followInsertCacheMut       sync.RWMutex
	followInsertCache          = make(map[string]insertCache)
	followUpdateCacheMut       sync.RWMutex
	followUpdateCache          = make(map[string]updateCache)
	followUpsertCacheMut       sync.RWMutex
	followUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single follow record from the query.
func (q followQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Follow, error) {
	o := &Follow{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for follow")
	}

	return o, nil
}

// All returns all Follow records from the query.
func (q followQuery) All(ctx context.Context, exec boil.ContextExecutor) (FollowSlice, error) {
	var o []*Follow

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Follow slice")
	}

	return o, nil
}

// Count returns the count of all Follow records in the query.
func (q followQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count follow rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q followQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if follow exists")
	}

	return count > 0, nil
}

// Follow pointed to by the foreign key.
func (o *Follow) Follow(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FollowID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// User pointed to by the foreign key.
func (o *Follow) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadFollow allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followL) LoadFollow(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFollow interface{}, mods queries.Applicator) error {
	var slice []*Follow
	var object *Follow

	if singular {
		var ok bool
		object, ok = maybeFollow.(*Follow)
		if !ok {
			object = new(Follow)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFollow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFollow))
			}
		}
	} else {
		s, ok := maybeFollow.(*[]*Follow)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFollow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFollow))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &followR{}
		}
		args = append(args, object.FollowID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followR{}
			}

			for _, a := range args {
				if a == obj.FollowID {
					continue Outer
				}
			}

			args = append(args, obj.FollowID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Follow = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.FollowFollows = append(foreign.R.FollowFollows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FollowID == foreign.ID {
				local.R.Follow = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.FollowFollows = append(foreign.R.FollowFollows, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFollow interface{}, mods queries.Applicator) error {
	var slice []*Follow
	var object *Follow

	if singular {
		var ok bool
		object, ok = maybeFollow.(*Follow)
		if !ok {
			object = new(Follow)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFollow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFollow))
			}
		}
	} else {
		s, ok := maybeFollow.(*[]*Follow)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFollow)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFollow))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &followR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Follows = append(foreign.R.Follows, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Follows = append(foreign.R.Follows, local)
				break
			}
		}
	}

	return nil
}

// SetFollow of the follow to the related item.
// Sets o.R.Follow to related.
// Adds o to related.R.FollowFollows.
func (o *Follow) SetFollow(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"follow\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"follow_id"}),
		strmangle.WhereClause("\"", "\"", 0, followPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FollowID = related.ID
	if o.R == nil {
		o.R = &followR{
			Follow: related,
		}
	} else {
		o.R.Follow = related
	}

	if related.R == nil {
		related.R = &userR{
			FollowFollows: FollowSlice{o},
		}
	} else {
		related.R.FollowFollows = append(related.R.FollowFollows, o)
	}

	return nil
}

// SetUser of the follow to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Follows.
func (o *Follow) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"follow\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 0, followPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &followR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Follows: FollowSlice{o},
		}
	} else {
		related.R.Follows = append(related.R.Follows, o)
	}

	return nil
}

// Follows retrieves all the records using an executor.
func Follows(mods ...qm.QueryMod) followQuery {
	mods = append(mods, qm.From("\"follow\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"follow\".*"})
	}

	return followQuery{q}
}

// FindFollow retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFollow(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Follow, error) {
	followObj := &Follow{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"follow\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, followObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from follow")
	}

	return followObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Follow) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no follow provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(followColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	followInsertCacheMut.RLock()
	cache, cached := followInsertCache[key]
	followInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			followAllColumns,
			followColumnsWithDefault,
			followColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, followGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(followType, followMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(followType, followMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"follow\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"follow\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into follow")
	}

	if !cached {
		followInsertCacheMut.Lock()
		followInsertCache[key] = cache
		followInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Follow.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Follow) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	followUpdateCacheMut.RLock()
	cache, cached := followUpdateCache[key]
	followUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			followAllColumns,
			followPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, followGeneratedColumns)

		if len(wl) == 0 {
			return errors.New("models: unable to update follow, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"follow\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, followPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(followType, followMapping, append(wl, followPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update follow row")
	}

	if !cached {
		followUpdateCacheMut.Lock()
		followUpdateCache[key] = cache
		followUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q followQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for follow")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FollowSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"follow\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, followPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in follow slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Follow) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no follow provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(followColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	followUpsertCacheMut.RLock()
	cache, cached := followUpsertCache[key]
	followUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			followAllColumns,
			followColumnsWithDefault,
			followColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			followAllColumns,
			followPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert follow, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(followPrimaryKeyColumns))
			copy(conflict, followPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"follow\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(followType, followMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(followType, followMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert follow")
	}

	if !cached {
		followUpsertCacheMut.Lock()
		followUpsertCache[key] = cache
		followUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Follow record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Follow) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no Follow provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), followPrimaryKeyMapping)
	sql := "DELETE FROM \"follow\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from follow")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q followQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no followQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from follow")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FollowSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"follow\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, followPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from follow slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Follow) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFollow(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FollowSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FollowSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"follow\".* FROM \"follow\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, followPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FollowSlice")
	}

	*o = slice

	return nil
}

// FollowExists checks if the Follow row exists.
func FollowExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"follow\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if follow exists")
	}

	return exists, nil
}
