// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ArticleFavorite is an object representing the database table.
type ArticleFavorite struct {
	ID        int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	ArticleID int64 `boil:"article_id" json:"article_id" toml:"article_id" yaml:"article_id"`
	UserID    int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *articleFavoriteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L articleFavoriteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArticleFavoriteColumns = struct {
	ID        string
	ArticleID string
	UserID    string
}{
	ID:        "id",
	ArticleID: "article_id",
	UserID:    "user_id",
}

var ArticleFavoriteTableColumns = struct {
	ID        string
	ArticleID string
	UserID    string
}{
	ID:        "article_favorite.id",
	ArticleID: "article_favorite.article_id",
	UserID:    "article_favorite.user_id",
}

// Generated where

var ArticleFavoriteWhere = struct {
	ID        whereHelperint64
	ArticleID whereHelperint64
	UserID    whereHelperint64
}{
	ID:        whereHelperint64{field: "\"article_favorite\".\"id\""},
	ArticleID: whereHelperint64{field: "\"article_favorite\".\"article_id\""},
	UserID:    whereHelperint64{field: "\"article_favorite\".\"user_id\""},
}

// ArticleFavoriteRels is where relationship names are stored.
var ArticleFavoriteRels = struct {
	User    string
	Article string
}{
	User:    "User",
	Article: "Article",
}

// articleFavoriteR is where relationships are stored.
type articleFavoriteR struct {
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
	Article *Article `boil:"Article" json:"Article" toml:"Article" yaml:"Article"`
}

// NewStruct creates a new relationship struct
func (*articleFavoriteR) NewStruct() *articleFavoriteR {
	return &articleFavoriteR{}
}

func (r *articleFavoriteR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *articleFavoriteR) GetArticle() *Article {
	if r == nil {
		return nil
	}
	return r.Article
}

// articleFavoriteL is where Load methods for each relationship are stored.
type articleFavoriteL struct{}

var (
	articleFavoriteAllColumns            = []string{"id", "article_id", "user_id"}
	articleFavoriteColumnsWithoutDefault = []string{"article_id", "user_id"}
	articleFavoriteColumnsWithDefault    = []string{"id"}
	articleFavoritePrimaryKeyColumns     = []string{"id"}
	articleFavoriteGeneratedColumns      = []string{"id"}
)

type (
	// ArticleFavoriteSlice is an alias for a slice of pointers to ArticleFavorite.
	// This should almost always be used instead of []ArticleFavorite.
	ArticleFavoriteSlice []*ArticleFavorite

	articleFavoriteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	articleFavoriteType                 = reflect.TypeOf(&ArticleFavorite{})
	articleFavoriteMapping              = queries.MakeStructMapping(articleFavoriteType)
	articleFavoritePrimaryKeyMapping, _ = queries.BindMapping(articleFavoriteType, articleFavoriteMapping, articleFavoritePrimaryKeyColumns)
	articleFavoriteInsertCacheMut       sync.RWMutex
	articleFavoriteInsertCache          = make(map[string]insertCache)
	articleFavoriteUpdateCacheMut       sync.RWMutex
	articleFavoriteUpdateCache          = make(map[string]updateCache)
	articleFavoriteUpsertCacheMut       sync.RWMutex
	articleFavoriteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single articleFavorite record from the query.
func (q articleFavoriteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ArticleFavorite, error) {
	o := &ArticleFavorite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for article_favorite")
	}

	return o, nil
}

// All returns all ArticleFavorite records from the query.
func (q articleFavoriteQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArticleFavoriteSlice, error) {
	var o []*ArticleFavorite

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ArticleFavorite slice")
	}

	return o, nil
}

// Count returns the count of all ArticleFavorite records in the query.
func (q articleFavoriteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count article_favorite rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q articleFavoriteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if article_favorite exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *ArticleFavorite) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Article pointed to by the foreign key.
func (o *ArticleFavorite) Article(mods ...qm.QueryMod) articleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArticleID),
	}

	queryMods = append(queryMods, mods...)

	return Articles(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (articleFavoriteL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArticleFavorite interface{}, mods queries.Applicator) error {
	var slice []*ArticleFavorite
	var object *ArticleFavorite

	if singular {
		var ok bool
		object, ok = maybeArticleFavorite.(*ArticleFavorite)
		if !ok {
			object = new(ArticleFavorite)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArticleFavorite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArticleFavorite))
			}
		}
	} else {
		s, ok := maybeArticleFavorite.(*[]*ArticleFavorite)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArticleFavorite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArticleFavorite))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &articleFavoriteR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &articleFavoriteR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ArticleFavorites = append(foreign.R.ArticleFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ArticleFavorites = append(foreign.R.ArticleFavorites, local)
				break
			}
		}
	}

	return nil
}

// LoadArticle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (articleFavoriteL) LoadArticle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArticleFavorite interface{}, mods queries.Applicator) error {
	var slice []*ArticleFavorite
	var object *ArticleFavorite

	if singular {
		var ok bool
		object, ok = maybeArticleFavorite.(*ArticleFavorite)
		if !ok {
			object = new(ArticleFavorite)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeArticleFavorite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeArticleFavorite))
			}
		}
	} else {
		s, ok := maybeArticleFavorite.(*[]*ArticleFavorite)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeArticleFavorite)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeArticleFavorite))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &articleFavoriteR{}
		}
		args = append(args, object.ArticleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &articleFavoriteR{}
			}

			for _, a := range args {
				if a == obj.ArticleID {
					continue Outer
				}
			}

			args = append(args, obj.ArticleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`article`),
		qm.WhereIn(`article.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Article")
	}

	var resultSlice []*Article
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Article")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for article")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for article")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Article = foreign
		if foreign.R == nil {
			foreign.R = &articleR{}
		}
		foreign.R.ArticleFavorites = append(foreign.R.ArticleFavorites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArticleID == foreign.ID {
				local.R.Article = foreign
				if foreign.R == nil {
					foreign.R = &articleR{}
				}
				foreign.R.ArticleFavorites = append(foreign.R.ArticleFavorites, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the articleFavorite to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ArticleFavorites.
func (o *ArticleFavorite) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"article_favorite\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 0, articleFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &articleFavoriteR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ArticleFavorites: ArticleFavoriteSlice{o},
		}
	} else {
		related.R.ArticleFavorites = append(related.R.ArticleFavorites, o)
	}

	return nil
}

// SetArticle of the articleFavorite to the related item.
// Sets o.R.Article to related.
// Adds o to related.R.ArticleFavorites.
func (o *ArticleFavorite) SetArticle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Article) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"article_favorite\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"article_id"}),
		strmangle.WhereClause("\"", "\"", 0, articleFavoritePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArticleID = related.ID
	if o.R == nil {
		o.R = &articleFavoriteR{
			Article: related,
		}
	} else {
		o.R.Article = related
	}

	if related.R == nil {
		related.R = &articleR{
			ArticleFavorites: ArticleFavoriteSlice{o},
		}
	} else {
		related.R.ArticleFavorites = append(related.R.ArticleFavorites, o)
	}

	return nil
}

// ArticleFavorites retrieves all the records using an executor.
func ArticleFavorites(mods ...qm.QueryMod) articleFavoriteQuery {
	mods = append(mods, qm.From("\"article_favorite\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"article_favorite\".*"})
	}

	return articleFavoriteQuery{q}
}

// FindArticleFavorite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArticleFavorite(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ArticleFavorite, error) {
	articleFavoriteObj := &ArticleFavorite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"article_favorite\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, articleFavoriteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from article_favorite")
	}

	return articleFavoriteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ArticleFavorite) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no article_favorite provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(articleFavoriteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	articleFavoriteInsertCacheMut.RLock()
	cache, cached := articleFavoriteInsertCache[key]
	articleFavoriteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			articleFavoriteAllColumns,
			articleFavoriteColumnsWithDefault,
			articleFavoriteColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, articleFavoriteGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(articleFavoriteType, articleFavoriteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(articleFavoriteType, articleFavoriteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"article_favorite\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"article_favorite\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into article_favorite")
	}

	if !cached {
		articleFavoriteInsertCacheMut.Lock()
		articleFavoriteInsertCache[key] = cache
		articleFavoriteInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ArticleFavorite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ArticleFavorite) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	articleFavoriteUpdateCacheMut.RLock()
	cache, cached := articleFavoriteUpdateCache[key]
	articleFavoriteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			articleFavoriteAllColumns,
			articleFavoritePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, articleFavoriteGeneratedColumns)

		if len(wl) == 0 {
			return errors.New("models: unable to update article_favorite, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"article_favorite\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, articleFavoritePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(articleFavoriteType, articleFavoriteMapping, append(wl, articleFavoritePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update article_favorite row")
	}

	if !cached {
		articleFavoriteUpdateCacheMut.Lock()
		articleFavoriteUpdateCache[key] = cache
		articleFavoriteUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q articleFavoriteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for article_favorite")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArticleFavoriteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), articleFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"article_favorite\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, articleFavoritePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in articleFavorite slice")
	}

	return nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ArticleFavorite) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no article_favorite provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(articleFavoriteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	articleFavoriteUpsertCacheMut.RLock()
	cache, cached := articleFavoriteUpsertCache[key]
	articleFavoriteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			articleFavoriteAllColumns,
			articleFavoriteColumnsWithDefault,
			articleFavoriteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			articleFavoriteAllColumns,
			articleFavoritePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert article_favorite, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(articleFavoritePrimaryKeyColumns))
			copy(conflict, articleFavoritePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"article_favorite\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(articleFavoriteType, articleFavoriteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(articleFavoriteType, articleFavoriteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert article_favorite")
	}

	if !cached {
		articleFavoriteUpsertCacheMut.Lock()
		articleFavoriteUpsertCache[key] = cache
		articleFavoriteUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ArticleFavorite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ArticleFavorite) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no ArticleFavorite provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), articleFavoritePrimaryKeyMapping)
	sql := "DELETE FROM \"article_favorite\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from article_favorite")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q articleFavoriteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no articleFavoriteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from article_favorite")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArticleFavoriteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), articleFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"article_favorite\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, articleFavoritePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from articleFavorite slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ArticleFavorite) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArticleFavorite(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArticleFavoriteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArticleFavoriteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), articleFavoritePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"article_favorite\".* FROM \"article_favorite\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, articleFavoritePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArticleFavoriteSlice")
	}

	*o = slice

	return nil
}

// ArticleFavoriteExists checks if the ArticleFavorite row exists.
func ArticleFavoriteExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"article_favorite\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if article_favorite exists")
	}

	return exists, nil
}
